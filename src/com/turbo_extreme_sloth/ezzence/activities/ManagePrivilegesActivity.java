package com.turbo_extreme_sloth.ezzence.activities;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.turbo_extreme_sloth.ezzence.CurrentUser;
import com.turbo_extreme_sloth.ezzence.R;
import com.turbo_extreme_sloth.ezzence.config.Config;
import com.turbo_extreme_sloth.ezzence.rest.RESTRequest;
import com.turbo_extreme_sloth.ezzence.rest.RESTRequestEvent;
import com.turbo_extreme_sloth.ezzence.rest.RESTRequestListener;

public class ManagePrivilegesActivity extends BaseActivity implements RESTRequestListener
{
	/** The IDs used in the button's tags, with random integers */
	protected final int PRIVILEGE_TAG = 1356212458;
	protected final int USER_NAME_TAG = 1356212459;
	
	/** The IDs for recognizing separate REST requests */
	protected final String GET_USERS_REQUEST_ID          = "getUsersRequestID";
	protected final String SET_USER_PRIVILEGE_REQUEST_ID = "setUserPrivilegeRequestID"; 
	
	/** Elements */
	protected TableLayout usersTableLayout;
	
	protected ProgressDialog progressDialog;
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_manage_privileges);
		
		usersTableLayout = (TableLayout) findViewById(R.id.usersTable);
		
		// Get users from server
		RESTRequest restRequest = new RESTRequest(Config.REST_REQUEST_BASE_URL + Config.REST_REQUEST_GET_USERS, GET_USERS_REQUEST_ID);
		
		restRequest.putString("sessionID", CurrentUser.getCurrentUser().getSessionID());
		
		restRequest.addEventListener(this);
		
		restRequest.execute();
	}

	@Override
	public void RESTRequestOnPreExecute(RESTRequestEvent event)
	{
		progressDialog = new ProgressDialog(this);
		progressDialog.setTitle(getResources().getString(R.string.loading));
		progressDialog.show();
	}

	@Override
	public void RESTRequestOnPostExecute(RESTRequestEvent event)
	{
		progressDialog.dismiss();
		
		if (GET_USERS_REQUEST_ID.equals(event.getID()))
		{
			handleGetUsersRequest(event);
		}
		else if (SET_USER_PRIVILEGE_REQUEST_ID.equals(event.getID()))
		{
			handleSetUserPrivilegeRequest(event);
		}
	}
	
	/**
	 * Handles a get users request
	 * 
	 * @param event
	 */
	protected void handleGetUsersRequest(RESTRequestEvent event)
	{
		String result = event.getResult();
		
		// Check if the returned string isn't an error generated by the REST class
		if (RESTRequest.isExceptionCode(result))
		{
			Toast.makeText(this, getString(R.string.error_unknown_exception), Toast.LENGTH_SHORT).show();
			
			finish();
			
			return;
		}
		
		try
		{
			// Parse JSON
			JSONObject jsonObject = new JSONObject(result);
			
			String message = jsonObject.getString("message");

			// Check if request was performed successfully
			if (!"success".equals(message))
			{
				Toast.makeText(getApplicationContext(), getResources().getString(R.string.rest_not_found), Toast.LENGTH_SHORT).show();
				
				return;
			}
			
			JSONArray usersJSONArray = jsonObject.getJSONArray("users");
			
			// Check if the users array was found
			if (!(usersJSONArray instanceof JSONArray))
			{
				Toast.makeText(getApplicationContext(), getResources().getString(R.string.no_users_found_exception), Toast.LENGTH_SHORT).show();
				
				return;
			}
			
			// Loop through JSONArray
			for (int i = 0; i < usersJSONArray.length(); i++)
			{
				JSONObject userJSONObject;
				
				// Skip when current value is not a JSON object
				if (usersJSONArray.get(i) instanceof JSONObject)
				{
					 userJSONObject = (JSONObject) usersJSONArray.get(i);
				}
				else
				{
					continue;
				}
				
				String userName             = userJSONObject.getString("id");
				String temperaturePrivilege = userJSONObject.getString("temperaturePrivilege");
				
				if (userName == null ||
					userName.length() <= 0)
				{
					continue;
				}
				
				// Add a new user row
				View userRowView = getLayoutInflater().inflate(R.layout.manage_privileges_user_row, usersTableLayout);
				
				TextView userNameTextView = (TextView) userRowView.findViewById(R.id.userNameTextView);
				
				Button removeTemperaturePrivilegeButton  = (Button) userRowView.findViewById(R.id.remove_temperature_privilege_button);
				Button requestTemperaturePrivilegeButton = (Button) userRowView.findViewById(R.id.request_temperature_privilege_button);
				Button setTemperaturePrivilegeButton     = (Button) userRowView.findViewById(R.id.set_temperature_privilege_button);
				
				removeTemperaturePrivilegeButton.setTag(USER_NAME_TAG, userName);
				requestTemperaturePrivilegeButton.setTag(USER_NAME_TAG, userName);
				setTemperaturePrivilegeButton.setTag(USER_NAME_TAG, userName);
				
				removeTemperaturePrivilegeButton.setTag(PRIVILEGE_TAG, "0");
				requestTemperaturePrivilegeButton.setTag(PRIVILEGE_TAG, "1");
				setTemperaturePrivilegeButton.setTag(PRIVILEGE_TAG, "2");
				
				removeTemperaturePrivilegeButton.setOnClickListener(handleChangePrivilegeButtonOnClick(removeTemperaturePrivilegeButton));
				requestTemperaturePrivilegeButton.setOnClickListener(handleChangePrivilegeButtonOnClick(requestTemperaturePrivilegeButton));
				setTemperaturePrivilegeButton.setOnClickListener(handleChangePrivilegeButtonOnClick(setTemperaturePrivilegeButton));
				
				userNameTextView.setText(userName);
				
				// Remove button of current setting
				if ("1".equals(temperaturePrivilege))
				{
					requestTemperaturePrivilegeButton.setVisibility(View.GONE);
				}
				else if ("2".equals(temperaturePrivilege))
				{
					setTemperaturePrivilegeButton.setVisibility(View.GONE);
				}
				else
				{
					removeTemperaturePrivilegeButton.setVisibility(View.GONE);
				}
			}
		}
		catch (JSONException e)
		{
			Toast.makeText(getApplicationContext(), getResources().getString(R.string.rest_not_found), Toast.LENGTH_SHORT).show();
			
			return;
		}
	}
	
	/**
	 * Handles the click event of a button in the users rows
	 * 
	 * @param button
	 */
	protected View.OnClickListener handleChangePrivilegeButtonOnClick(final Button button)
	{
		return new View.OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				if (button.getTag(USER_NAME_TAG) instanceof String &&
					button.getTag(PRIVILEGE_TAG) instanceof String)
				{
					String userName  = (String) button.getTag(USER_NAME_TAG);
					String privilege = (String) button.getTag(PRIVILEGE_TAG);
					
					sendSetUserPrivilegeRequest(userName, privilege);
				}
			}
		};
	}
	
	/**
	 * Sends a request to the server to change a user's privilege
	 * 
	 * @param userName
	 * @param privilege
	 */
	protected void sendSetUserPrivilegeRequest(String userName, String privilege)
	{
		// Get users from server
		RESTRequest restRequest = new RESTRequest(Config.REST_REQUEST_BASE_URL + Config.REST_REQUEST_SET_USER_PRIVILEGE, SET_USER_PRIVILEGE_REQUEST_ID);
		
		// Values
		restRequest.putString("sessionID", CurrentUser.getCurrentUser().getSessionID());
		restRequest.putString("userID"   , userName);
		restRequest.putString("privilege", "temperatureSetting");
		restRequest.putString("value"    , privilege);
		
		restRequest.addEventListener(this);
		
		restRequest.execute();
	}
	
	/**
	 * Handles a set user privilege request
	 * 
	 * @param event
	 */
	protected void handleSetUserPrivilegeRequest(RESTRequestEvent event)
	{
		System.out.println(event.getResult());
		
		if ("success".equals(event.getMessageFromResult()))
		{
			// Refresh activity
			finish();
			
			startActivity(getIntent());
		}
		else
		{
			AlertDialog.Builder builder = new AlertDialog.Builder(ManagePrivilegesActivity.this);

			builder.setMessage(R.string.set_privilege_failed_exception);
			builder.setPositiveButton(R.string.ok, null);
			builder.show();
		}
	}
}
